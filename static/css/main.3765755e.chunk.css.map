{"version":3,"sources":["webpack://src/index.css","webpack://src/App.css","webpack://src/components/nav-bar/nav-bar.styles.scss","webpack://src/styles/_base.scss","webpack://src/styles/_media.scss","webpack://src/components/hamburger-menu-overlay/hamburger-menu-overlay.styles.scss"],"names":[],"mappings":"AAAA,KACE,cACF,CAEA,KACE,QAAS,CACT,mCAAqC,CACrC,kCAAmC,CACnC,iCACF,CAEA,KACE,sFAEF,CCdA,UACE,6DACF,CCCA,cACE,oBAAa,CAAb,YAAa,CACb,0BAAmB,CAAnB,kBAAmB,CACnB,0BAAmB,CAAnB,kBAAmB,CACnB,UAAW,CACZ,SAGC,YAAa,CACd,SAGC,oBAAqB,CACrB,aCfa,CDaf,eAKI,aCnBW,CDoBZ,gBAID,aCxBa,CDyBb,+BCzBa,CD0Bb,mBAAoB,CACpB,eAAgB,CACjB,yBAGC,cACE,YAAa,CACb,UAAW,CAEX,qCAA8B,CAA9B,6BAA8B,CAC9B,eAAgB,CAEjB,YAGC,WAAY,CACb,SAGC,YAAa,CACd,gBAGC,WAAY,CACZ,UAAW,CACX,cAAe,CACf,gCAA2B,CAA3B,wBAA2B,CAA3B,8CAA2B,CAC3B,SAAU,CALZ,sBAQI,4BAAA,CAAA,oBAAqB,CACtB,CEoDH,yBF/CA,cACE,WAAY,CAEZ,YAAa,CACb,oCAAA,CAAA,4BAA6B,CAC9B,4BAGC,YAAa,CACd,uBAGC,UAAW,CACX,oBAAa,CAAb,YAAa,CACb,oCAA6B,CAA7B,4BAA6B,CAC7B,0BAAA,CAAA,kBAAmB,CACpB,SAGC,gBAAiB,CAClB,eAGC,YAAa,CACd,CGjFF,qDADC,oBAAA,CAAA,YAciB,CAblB,0BAGC,cAAe,CACf,qBAAmC,CACnC,UAAW,CACX,WAAY,CACZ,OAAU,CAEV,6BAAsB,CAAtB,qBAAsB,CACtB,kCAA2B,CAA3B,0BAA2B,CAC3B,0BAAmB,CAAnB,kBAAmB,CACnB,iBAAkB,CAClB,gBAAiB,CAClB,iBAGC,iBAAkB,CAClB,UAAW,CAEX,gCAAA,CAAA,wBAAA,CAAA,8CAA2B,CAJ7B,wBAOI,4BAAA,CAAA,oBAAqB,CACtB,oBAID,oBAAqB,CACrB,aFjCa,CEkCb,gBAAiB,CACjB,gBAAiB,CACjB,mBAAoB,CALtB,0BAQI,aFxCW,CEyCZ,GAID,yBAAwC,CACxC,SAAU,CACX,2BAGC,aFlDa,CEmDd,0BAGC,wBFtDa","file":"main.3765755e.chunk.css","sourcesContent":["html {\n  font-size: 100%;\n}\n\nbody {\n  margin: 0;\n  font-family: \"Montserrat\", sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: \"Montserrat\", source-code-pro, Menlo, Monaco, Consolas,\n    \"Courier New\", monospace;\n}\n",".root-div {\n  background-image: linear-gradient(to top left, #161618, #313132);\n}\n","@import \"../../styles/base\";\n@import \"../../styles/media\";\n\n.nav-bar-full {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  z-index: -2;\n}\n\n.no-show {\n  display: none;\n}\n\n.nav-btn {\n  text-decoration: none;\n  color: $white;\n\n  &:hover {\n    color: $green;\n  }\n}\n\n.nav-btn-active {\n  color: $green;\n  border-bottom: 2px solid $green;\n  padding-bottom: 17px;\n  margin-top: 17px;\n}\n\n@include media(\"<=phone\") {\n  .nav-bar-full {\n    height: 110px;\n    width: 86vw;\n\n    justify-content: space-between;\n    margin-left: 6vw;\n    // padding-right: 10vw;\n  }\n\n  .logo-image {\n    height: 55px;\n  }\n\n  .nav-btn {\n    display: none;\n  }\n\n  .nav-btn-mobile {\n    height: 26px;\n    width: 26px;\n    cursor: pointer;\n    transition: transform 300ms;\n    z-index: 2;\n\n    &:hover {\n      transform: scale(1.2);\n    }\n  }\n}\n\n@include media(\">phone\") {\n  .nav-bar-full {\n    width: 100vw;\n\n    height: 188px;\n    justify-content: space-evenly;\n  }\n\n  .ham-menu-overlay-container {\n    display: none;\n  }\n\n  .nav-buttons-container {\n    width: 40vw;\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n  }\n\n  .nav-btn {\n    font-size: 1.2rem;\n  }\n\n  .mobile-images {\n    display: none;\n  }\n}\n","$green: #aed533;\n$white: #fcfcfc;\n$black: #2b2d25;\n","$breakpoints: (\n  \"phone\": 800px,\n  \"tablet\": 768px,\n  \"desktop\": 1200px,\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///\t\t'retina2x': (\n///\t\t\t'(-webkit-min-device-pixel-ratio: 2)',\n///\t\t\t'(min-resolution: 192dpi)'\n///\t\t)\n///\t);\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"retina2x\": (\n    \"(-webkit-min-device-pixel-ratio: 2)\",\n    \"(min-resolution: 192dpi)\",\n  ),\n  \"retina3x\": (\n    \"(-webkit-min-device-pixel-ratio: 3)\",\n    \"(min-resolution: 350dpi)\",\n  ),\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @author Eduardo Boucas\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media(\">128px\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media(\">20em\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media(\">2.0rem\") {}\n///\n///\t /* Generates: */\n///\t @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1,\n) !default;\n///\n/// Generates a media query based on a list of conditions\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media(\">phone\") { }\n///\n/// @example scss - With two set breakpoints\n///  @include media(\">phone\", \"<=tablet\") { }\n///\n/// @example scss - With custom values\n///  @include media(\">=358px\", \"<850px\") { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media(\">desktop\", \"<=1350px\") { }\n///\n/// @example scss - With a static expression\n///  @include media(\"retina2x\") { }\n///\n/// @example scss - Mixing everything\n///  @include media(\">=350px\", \"<tablet\", \"retina3x\") { }\n///\n@mixin media($conditions...) {\n  @for $i from 1 through length($conditions) {\n    $conditions: set-nth(\n      $conditions,\n      $i,\n      parse-expression(nth($conditions, $i))\n    );\n  }\n\n  $branches: get-query-branches($conditions);\n  $query: \"\";\n\n  @each $branch in $branches {\n    @if (str-length($query) != 0) {\n      $query: $query + \", \";\n    }\n\n    $query: $query + $branch;\n  }\n\n  @media #{$query} {\n    @content;\n  }\n}\n\n///\n/// Reads a list of media query expressions and separates logical disjunctions into different branches\n///\n/// @author Eduardo Boucas\n///\n/// @param {List}   $expressions  - list of expressions\n///\n/// @throws `$expression` is not a valid expression\n///\n/// @return {List | Null}\n///\n@function get-query-branches($expressions) {\n  $result: \"\";\n  $has-groups: false;\n\n  // Getting initial snapshot and looking for groups\n  @each $expression in $expressions {\n    @if (str-length($result) != 0) {\n      $result: $result + \" and \";\n    }\n\n    @if (type-of($expression) == \"string\") {\n      $result: $result + $expression;\n    } @else if (type-of($expression) == \"list\") {\n      $result: $result + nth($expression, 1);\n      $has-groups: true;\n    } @else {\n      @warn '#{$expression} is not a valid expression.';\n    }\n  }\n\n  // If we have groups, we have to create all possible combinations\n  @if $has-groups {\n    @each $expression in $expressions {\n      @if (type-of($expression) == \"list\") {\n        $first: nth($expression, 1);\n\n        @each $member in $expression {\n          @if ($member != $first) {\n            @each $partial in $result {\n              $result: join(\n                $result,\n                str-replace-first($first, $member, $partial)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  @return $result;\n}\n\n///\n/// Parses a string to form a media query expression\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $expression  - expression (in string)\n///\n/// @throws Expression with type `type-of($expression)` detected, string expected\n/// @throws `$expression` is missing an operator\n/// @throws Unknown unit: `$unit`\n///\n/// @return {String | Null}\n///\n@function parse-expression($expression) {\n  $operator: \"\";\n  $value: \"\";\n  $element: \"\";\n  $result: \"\";\n  $is-width: true;\n\n  @if (type-of($expression) != \"string\") {\n    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';\n  }\n\n  // Separating the operator from the rest of the expression\n  @if (str-slice($expression, 2, 2) == \"=\") {\n    $operator: str-slice($expression, 1, 2);\n    $value: str-slice($expression, 3);\n  } @else {\n    $operator: str-slice($expression, 1, 1);\n    $value: str-slice($expression, 2);\n  }\n\n  // Checking what type of expression we're dealing with\n  @if map-has-key($breakpoints, $value) {\n    $result: map-get($breakpoints, $value);\n  } @else if map-has-key($media-expressions, $expression) {\n    $result: map-get($media-expressions, $expression);\n    $is-width: false;\n  } @else {\n    $result: to-number($value);\n  }\n\n  @if ($is-width) {\n    $unit: unit($result);\n    $interval: 0;\n\n    @if (map-has-key($unit-intervals, $unit)) {\n      $interval: map-get($unit-intervals, $unit);\n    } @else {\n      @warn 'Unknown unit: #{$unit}';\n    }\n\n    @if ($operator == \">\") {\n      $element: \"(min-width: #{$result + $interval})\";\n    } @else if ($operator == \"<\") {\n      $element: \"(max-width: #{$result - $interval})\";\n    } @else if ($operator == \">=\") {\n      $element: \"(min-width: #{$result})\";\n    } @else if ($operator == \"<=\") {\n      $element: \"(max-width: #{$result})\";\n    } @else {\n      @warn '#{$expression} is missing an operator.';\n    }\n  } @else {\n    $element: $result;\n  }\n\n  @return $element;\n}\n\n///\n/// Replaces the first occurence of the string with the replacement string\n///\n/// @author Eduardo Boucas\n///\n/// @param {String}   $search  - The value being searched for\n/// @param {String}   $replace  - The replacement string\n/// @param {String}   $subject  - The string being replaced on\n///\n/// @return {String | Null}\n///\n@function str-replace-first($search, $replace, $subject) {\n  $search-start: str-index($subject, $search);\n\n  @if $search-start == null {\n    @return $subject;\n  }\n\n  $result: str-slice($subject, 0, $search-start - 1);\n  $result: $result + $replace;\n  $result: $result + str-slice($subject, $search-start + str-length($search));\n\n  @return $result;\n}\n\n///\n/// Casts a number to a string\n///\n/// @author Hugo Giraudel\n///\n/// @param {String}   $string  - Number to be parsed\n///\n/// @return {List | Null}\n///\n@function to-number($string) {\n  // Matrices\n  $strings: \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\";\n  $numbers: 0 1 2 3 4 5 6 7 8 9;\n\n  // Result\n  $result: 0;\n  $divider: 0;\n  $minus: false;\n\n  // Looping through all characters\n  @for $i from 1 through str-length($string) {\n    $character: str-slice($string, $i, $i);\n    $index: index($strings, $character);\n\n    @if $character == \"-\" {\n      $minus: true;\n    } @else if $character == \".\" {\n      $divider: 1;\n    } @else {\n      @if type-of($index) != \"number\" {\n        $result: if($minus, $result * -1, $result);\n        @return _length($result, str-slice($string, $i));\n      }\n\n      $number: nth($numbers, $index);\n\n      @if $divider == 0 {\n        $result: $result * 10;\n      } @else {\n        // Move the decimal dot to the left\n        $divider: $divider * 10;\n        $number: $number / $divider;\n      }\n\n      $result: $result + $number;\n    }\n  }\n\n  @return if($minus, $result * -1, $result);\n}\n\n@function _length($number, $unit) {\n  $strings: \"px\" \"cm\" \"mm\" \"%\" \"ch\" \"pica\" \"in\" \"em\" \"rem\" \"pt\" \"pc\" \"ex\" \"vw\"\n    \"vh\" \"vmin\" \"vmax\";\n  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;\n  $index: index($strings, $unit);\n\n  @if type-of($index) != \"number\" {\n    @warn 'Unknown unit `#{$unit}`.';\n    @return false;\n  }\n\n  @return $number * nth($units, $index);\n}\n\n/**\n*\n* Testing\n*\n**/\n","@import \"../../styles/base\";\n@import \"../../styles/media\";\n\n#overlay-container-wrapper {\n  display: flex;\n}\n\n.burger-buttons-container {\n  position: fixed;\n  background-color: rgba($color: #111, $alpha: 1);\n  width: 50vw;\n  height: 100%;\n  right: 0px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  padding-top: 160px;\n  margin-top: -53px;\n}\n\n.burger-envelope {\n  position: absolute;\n  bottom: 20%;\n\n  transition: transform 300ms;\n\n  &:active {\n    transform: scale(1.2);\n  }\n}\n\n.burger-overlay-btn {\n  text-decoration: none;\n  color: $white;\n  font-size: 1.1rem;\n  padding-top: 43px;\n  padding-bottom: 43px;\n\n  &:hover {\n    color: $green;\n  }\n}\n\nhr {\n  border: 0.5px solid rgba($color: #707070, $alpha: 1);\n  width: 80%;\n}\n\n.burger-overlay-btn-active {\n  color: $green;\n}\n\n.burger-overlay-hr-active {\n  border: 1px solid $green;\n}\n"]}